import React, { useState } from 'react';
import MainLayout from '../components/layout/MainLayout';
import Button from '../components/common/Button';
import { useTheme } from '../context/ThemeContext';
import MissingInputsForm from '../components/chat/MissingInputsForm';

/**
 * A test component for demonstrating the vulnerability detection workflow
 */
const VulnerabilityDetectionTest = () => {
  const { darkMode } = useTheme();
  const [step, setStep] = useState(1);
  const [showForm, setShowForm] = useState(false);
  const [inputData, setInputData] = useState({});
  
  // Simulate the missing inputs data we'd get from backend
  const mockMissingInputs = {
    "vulnerability_detection": [
      "design_spec",
      "vulnerability"
    ]
  };
  
  const handleStartTest = () => {
    setStep(2);
    setShowForm(true);
  };
  
  const handleFormSubmit = (inputs) => {
    setInputData(inputs);
    setShowForm(false);
    setStep(3);
  };
  
  return (
    <MainLayout>
      <div className="max-w-4xl mx-auto py-6">
        <h1 className="text-2xl font-bold mb-4">Vulnerability Detection Workflow Test</h1>
        
        <div className={`p-6 rounded-lg border ${
          darkMode ? 'bg-dark-100 border-gray-700' : 'bg-white border-gray-200'
        }`}>
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Test Steps</h2>
            <ol className="list-decimal list-inside space-y-2 ml-2">
              <li className={step >= 1 ? 'font-medium' : ''}>
                Start the vulnerability detection workflow
              </li>
              <li className={step >= 2 ? 'font-medium' : ''}>
                Get prompted for missing inputs (design specification and vulnerability type)
              </li>
              <li className={step >= 3 ? 'font-medium' : ''}>
                Review provided inputs
              </li>
            </ol>
          </div>
          
          {step === 1 && (
            <div>
              <p className="mb-4">
                This test simulates what happens when a user submits a query that is detected
                as a vulnerability detection intent but is missing required inputs.
              </p>
              <Button 
                variant="primary" 
                onClick={handleStartTest}
              >
                Start Test
              </Button>
            </div>
          )}
          
          {step === 2 && showForm && (
            <div>
              <div className="mb-4">
                <p className="text-yellow-600 dark:text-yellow-400 font-medium">
                  Your query was detected as a vulnerability detection request, but additional information is needed.
                </p>
              </div>
              <MissingInputsForm 
                missingInputs={mockMissingInputs}
                onSubmit={handleFormSubmit}
              />
            </div>
          )}
          
          {step === 3 && (
            <div>
              <h3 className="text-lg font-medium mb-3">Provided Inputs:</h3>
              <div className={`p-4 rounded-lg border ${
                darkMode ? 'bg-dark-200 border-gray-700' : 'bg-gray-50 border-gray-300'
              }`}>
                <p className="mb-2">
                  <span className="font-medium">Design Specification:</span> 
                  {inputData.design_spec ? (
                    <span className="ml-2 text-green-600 dark:text-green-400">Provided ✓</span>
                  ) : (
                    <span className="ml-2 text-red-600 dark:text-red-400">Missing ✗</span>
                  )}
                </p>
                {inputData.design_spec && (
                  <pre className={`p-3 my-2 rounded-md overflow-x-auto text-sm ${
                    darkMode ? 'bg-gray-800 text-gray-300' : 'bg-gray-100 text-gray-800'
                  }`}>
                    {inputData.design_spec.length > 500 
                      ? inputData.design_spec.substring(0, 500) + '...' 
                      : inputData.design_spec}
                  </pre>
                )}
                
                <p className="mt-4 mb-2">
                  <span className="font-medium">Vulnerability Type:</span> 
                  {inputData.vulnerability ? (
                    <span className="ml-2 text-green-600 dark:text-green-400">Provided ✓</span>
                  ) : (
                    <span className="ml-2 text-red-600 dark:text-red-400">Missing ✗</span>
                  )}
                </p>
                {inputData.vulnerability && (
                  <div className={`p-3 my-2 rounded-md ${
                    darkMode ? 'bg-gray-800 text-gray-300' : 'bg-gray-100 text-gray-800'
                  }`}>
                    {inputData.vulnerability}
                  </div>
                )}
              </div>
              
              <div className="mt-6">
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  In a real scenario, this data would be sent back to the backend to complete the vulnerability detection process.
                </p>
                <Button 
                  variant="primary" 
                  onClick={() => setStep(1)}
                  className="mt-4"
                >
                  Restart Test
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>
    </MainLayout>
  );
};

export default VulnerabilityDetectionTest;